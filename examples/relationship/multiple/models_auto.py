"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models


class SupervisorDict(typing.TypedDict, total=False):
    """TypedDict for properties that are not required."""

    id: int


class TSupervisor(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: Unique identifier for the supervisor.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: "sqlalchemy.Column[int]"

    def __init__(self, id: typing.Optional[int] = None) -> None:
        """
        Construct.

        Args:
            id: Unique identifier for the supervisor.

        """
        ...

    @classmethod
    def from_dict(cls) -> "TSupervisor":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Unique identifier for the supervisor.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TSupervisor":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> SupervisorDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Supervisor: typing.Type[TSupervisor] = models.Supervisor  # type: ignore


class EmployeeDict(typing.TypedDict, total=False):
    """TypedDict for properties that are not required."""

    id: int
    primary_supervisor: typing.Optional["SupervisorDict"]
    secondary_supervisor: typing.Optional["SupervisorDict"]


class TEmployee(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Attrs:
        id: Unique identifier for the employee.
        primary_supervisor: The primary_supervisor of the Employee.
        secondary_supervisor: The secondary_supervisor of the Employee.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: "sqlalchemy.Column[int]"
    primary_supervisor: 'sqlalchemy.Column[typing.Optional["TSupervisor"]]'
    secondary_supervisor: 'sqlalchemy.Column[typing.Optional["TSupervisor"]]'

    def __init__(
        self,
        id: typing.Optional[int] = None,
        primary_supervisor: typing.Optional["TSupervisor"] = None,
        secondary_supervisor: typing.Optional["TSupervisor"] = None,
    ) -> None:
        """
        Construct.

        Args:
            id: Unique identifier for the employee.
            primary_supervisor: The primary_supervisor of the Employee.
            secondary_supervisor: The secondary_supervisor of the Employee.

        """
        ...

    @classmethod
    def from_dict(
        cls,
        primary_supervisor: typing.Optional["SupervisorDict"] = None,
        secondary_supervisor: typing.Optional["SupervisorDict"] = None,
    ) -> "TEmployee":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Unique identifier for the employee.
            primary_supervisor: The primary_supervisor of the Employee.
            secondary_supervisor: The secondary_supervisor of the Employee.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TEmployee":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> EmployeeDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Employee: typing.Type[TEmployee] = models.Employee  # type: ignore

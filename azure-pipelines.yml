# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - master
pr:
  - master
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master

jobs:
  - job: "pytest"
    pool:
      vmImage: "$(imageName)"
    strategy:
      matrix:
        Python37:
          python.version: "3.7"
          imageName: "ubuntu-latest"
          PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
        # To be used once azure pipelines supports Python 3.9
        # Python38:
        #   python.version: "3.8"
        #   imageName: "ubuntu-latest"
        Python38Linux:
          python.version: "3.8"
          imageName: "ubuntu-latest"
          PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
        Python38Mac:
          python.version: "3.8"
          imageName: "macOS-latest"
          PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
        Python38Windows:
          python.version: "3.8"
          imageName: "windows-latest"
          PIP_CACHE_DIR: $(Pipeline.Workspace)\.pip
        # To be used once azure pipelines supports Python 3.9
        # Python39Linux:
        #   python.version: "3.9"
        #   imageName: "ubuntu-latest"
        # Python39Mac:
        #   python.version: "3.9"
        #   imageName: "macOS-latest"
        # Python39Windows:
        #   python.version: "3.9"
        #   imageName: "windows-latest"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - task: Cache@2
        inputs:
          key: '"$(python.version)" | "$(Agent.OS)" | setup.py'
          path: $(PIP_CACHE_DIR)
        displayName: Cache pip packages

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          pip install pytest pytest-azurepipelines
          pytest
        displayName: "pytest"
  - job: "pylint"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          pylint tests open_alchemy
        displayName: "pylint"
  - job: "mypy"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          mypy --ignore-missing-imports open_alchemy
        displayName: "mypy"
  - job: "isort"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          isort -rc --check-only open_alchemy tests
        displayName: "isort"
  - job: "black"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          black --check open_alchemy tests examples
        displayName: "black"
  - job: "pydocstyle"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: |
          pydocstyle open_alchemy
        displayName: "pydocstyle"

  - job: "bandit"
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python38:
          python.version: "3.8"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev,test]
        displayName: "Install dependencies"

      - script: bandit -r open_alchemy -s B101,B303,B310
        displayName: "bandit"
